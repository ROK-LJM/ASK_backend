<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--멤버 sql문-->
<mapper namespace="com.ask.ask_project.mapper.BoardMapper">

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 로그인, 회원가입 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 로그인 체크 -->
    <select id="loginCheck" parameterType="userDTO" resultType="int">
        SELECT COUNT(*) FROM ask.user_info WHERE userId = #{userId} AND userPw = #{userPw};
    </select>

    <!-- 회원가입 - 마스터 -->
    <insert id="insert_memberInfo" parameterType="memberDTO">
        INSERT INTO ask.member_info(id, pw, name, email) values (#{id}, #{pw}, #{name}, #{email});
    </insert>

    <!--회원가입 - 마스터를 user_info에 넣어줌 -->
    <insert id="insert_userInfo" parameterType="memberDTO">
        INSERT INTO ask.user_info(compCode, userId, userPw, userName, userGrant) values (#{id}, #{id}, #{pw}, #{name}, 1);
    </insert>

    <!-- 회원가입 - 아이디 중복 체크 -->
    <select id="checkId" parameterType="String" resultType="int">
        SELECT count(*) FROM ask.member_info WHERE id = #{id};
    </select>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 사용자 관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!--사용자관리 (create)-->
    <insert id="createUser" parameterType="userDTO">
        INSERT INTO ask.user_info(userId, userPw, userName, compCode, userGrant) VALUES (#{userId}, #{userPw}, #{userName}, #{compCode}, 0);
    </insert>

    <!--사용자관리 (read)-->
    <select id="readUser" parameterType="userDTO" resultType="userDTO">
        SELECT * FROM ask.user_info where compCode = #{compCode} AND userId NOT IN(#{compCode});
    </select>

    <!--사용자관리 (update) -->
    <update id="updateUser" parameterType="userDTO">
        UPDATE ask.user_info SET userId = #{userId}, userPw = #{userPw}, userName = #{userName}, userGrant = #{userGrant}
        WHERE compCode=#{compCode} AND userId = #{preUserId};
    </update>

    <!--사용자관리 (delete)-->
    <delete id="deleteUser" parameterType="String">
        DELETE FROM ask.user_info WHERE userId = #{userId};
    </delete>

    <!--마스터키-->
    <select id="getMaster" parameterType="userDTO" resultType="String">
        SELECT compCode FROM ask.user_info WHERE userId = #{userId};
    </select>

    <!--사용자관리 (updateModal)-->
    <select id="updateUserModal" parameterType="userDTO" resultType="userDTO">
        SELECT * FROM ask.user_info where compCode = #{compCode} AND userId = #{userId};
    </select>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 모바일 관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 모바일관리 - 모바일계정 정보 등록(create) -->
    <insert id="createMobile" parameterType="mbUserDTO">
        INSERT INTO ask.mbUser_info(compCode, mb_id, mb_pw, mb_code, mb_name) VALUES(#{compCode}, #{mb_id}, #{mb_pw}, #{mb_code}, #{mb_name});
    </insert>
    <!-- 모바일관리 - 모바일계정 정보 불러오기(read) -->
    <select id="readMobile" parameterType="mbUserDTO" resultType="mbUserDTO">
        SELECT * FROM ask.mbUser_info WHERE compCode = #{compCode};
    </select>

    <!-- 모바일관리 - 모바일계정 정보 수정(update) -->
    <update id="updateMobile" parameterType="mbUserDTO">
        UPDATE ask.mbUser_info SET mb_id=#{mb_id}, mb_pw=#{mb_pw}, mb_code=#{mb_code}, mb_name=#{mb_name}
        WHERE mb_id = #{preMobileId};
    </update>
    <!-- 모바일관리 - 모바일계정 정보 수정 - 모달 창에 업데이트 할 값 보내기 -->
    <select id="updateMobileModal" parameterType="mbUserDTO" resultType="mbUserDTO">
        SELECT * FROM ask.mbUser_info where mb_id = #{mb_id};
    </select>

    <!-- 모바일관리 - 모바일계정 정보 등록(delete) -->
    <delete id="deleteMobile" parameterType="String">
        DELETE FROM ask.mbUser_info WHERE mb_id = #{mb_id}
    </delete>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 회사 설정 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 회사 설정 - 회사 중복 확인 -->
    <select id="checkCompany" parameterType="CompanyDTO" resultType="int">
        SELECT COUNT(*) FROM ask.company_info WHERE compNum = #{compNum};
    </select>

    <!-- 회사 설정 - 자회사 정보 등록 -->
    <insert id="createCompany" parameterType="companyDTO">
        INSERT INTO ask.company_info(compNum, compName, compCEO, compAddress, compType, compItems, compEmail, lunchTime, id)
        values (#{compNum}, #{compName}, #{compCEO}, #{compAddress}, #{compType}, #{compItems}, #{compEmail}, #{lunchTime}, #{id});
    </insert>

    <!-- 회사 설정 - 자회사 정보 불러오기 -->
    <select id="readCompany" parameterType="companyDTO" resultType="companyDTO">
        SELECT * FROM ask.company_info WHERE id = #{id};
    </select>

    <!-- 회사 설정 - 자회사 정보 수정 -->
    <update id="updateCompany" parameterType="companyDTO">
        UPDATE ask.company_info SET compNum = #{compNum}, compName = #{compName}
                                  , compCEO = #{compCEO}, compAddress = #{compAddress}
                                  , compType = #{compType}, compItems = #{compItems}
                                  , compEmail = #{compEmail}, lunchTime = #{lunchTime}
                                WHERE id = #{id};
    </update>

    <!-- 회사 설정 - 자회사 정보 삭제 -->
    <delete id="deleteCompany" parameterType="companyDTO">
        DELETE FROM ask.company_info WHERE id = #{id};
    </delete>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 부서관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 부서관리 - 부서정보 등록(create) -->
    <insert id="createDep" parameterType="depDTO">
        INSERT INTO ask.dep_info(compCode, depCode, depName, depDetail) VALUES(#{compCode}, #{depCode}, #{depName}, #{depDetail});
    </insert>

    <!-- 부서관리 - 부서정보 불러오기(read) -->
    <select id="readDep" parameterType="depDTO" resultType="depDTO">
        SELECT * FROM ask.dep_info WHERE compCode = #{compCode};
    </select>

    <!-- 부서관리 - 부서정보 수정(update) -->
    <update id="updateDep" parameterType="depDTO">
        UPDATE ask.dep_info SET compCode=#{compCode}, depCode=#{depCode}, depName=#{depName}, depDetail=#{depDetail}
        WHERE depId = #{depId};
    </update>

    <!-- 부서관리 - depCode 리스트 가져오기 -->
    <select id="getDepCode" parameterType="depDTO" resultType="int">
        SELECT count(*) FROM (SELECT depCode FROM ask.dep_info WHERE depId NOT IN(#{depId})) t WHERE depCode = #{depCode};
    </select>

    <!-- 부서관리 - 부서정보 수정 모달(modal) -->
    <select id="updateDepModal" parameterType="depDTO" resultType="depDTO">
        SELECT * FROM ask.dep_info WHERE depId = #{depId};
    </select>

    <!-- 부서관리 - 부서정보 삭제(delete) -->
    <delete id="deleteDep" parameterType="depDTO">
        DELETE FROM ask.dep_info WHERE depId = #{depId};
    </delete>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 사원관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 사원관리 - 사원정보 중복 확인 -->
    <select id="getEmpCode" parameterType="empDTO" resultType="int">
        SELECT COUNT(*) FROM ask.emp_info WHERE compCode = #{compCode} AND empNum = #{empNum};
    </select>
    <!-- 사원관리 - 사원정보 등록(create) -->
    <insert id="createEmp" parameterType="empDTO">
        INSERT INTO ask.emp_info(compCode, empNum, empName, empSSN, empPhone, empEmail,
                                 depCode,
                                 depName,
                                 empRank, empStart, empEnd, totalVacation, remindVacation, empEndReason,
                                 bankName, bankNum, bankOwner, empFamilyNum, empPay, empAddress, empPhoto, empResume)
        VALUES(#{compCode}, #{empNum}, #{empName}, #{empSSN}, #{empPhone}, #{empEmail},
               #{depCode},
               #{depName},
               #{empRank}, #{empStart}, #{empEnd}, #{totalVacation}, #{remindVacation}, #{empEndReason},
               #{bankName}, #{bankNum}, #{bankOwner}, #{empFamilyNum}, #{empPay}, #{empAddress}, #{empPhoto}, #{empResume}
              )
    </insert>

    <!-- 사원관리 - 사원정보 불어오기(read) -->
    <select id="readEmp" parameterType="empDTO" resultType="empDTO">
        SELECT * FROM ask.emp_info WHERE compCode = #{compCode};
    </select>

    <!-- 사원관리 - 사원정보 수정(update) -->
    <update id="updateEmp" parameterType="empDTO">
        UPDATE ask.emp_info SET empNum=#{empNum}, empName=#{empName}, empSSN=#{empName}, empPhone=#{empPhone}, empEmail=#{empEmail},
                                depCode=#{depCode},
                                depName=#{depName},
                                empRank=#{empRank}, empStart=#{empStart}, empEnd=#{empEnd}, totalVacation=#{totalVacation},
                                remindVacation=#{remindVacation}, empEndReason=#{empEndReason},
                                bankName=#{bankName}, bankNum=#{bankNum}, bankOwner=#{bankOwner}, empFamilyNum=#{empFamilyNum},
                                empPay=#{empPay}, empAddress=#{empAddress}, empPhoto=#{empPhoto}, empResume=#{empResume}
                            WHERE empId=#{empId};
    </update>
    <!-- 사원관리 - 사원항목 모달 -->
    <select id="updateEmpModal" parameterType="empDTO" resultType="empDTO">
        SELECT * FROM ask.emp_info WHERE empId = #{empId}
    </select>


    <!-- 사원관리 - 사원정보 삭제(delete) -->
    <delete id="deleteEmp" parameterType="empDTO">
        DELETE FROM ask.emp_info WHERE empId = #{empId};
    </delete>


    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 수당관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- CRUD (create, read, update, delete) -->
    <!-- 수당관리 - 수당항목 등록(create) -->
    <insert id="createEmpPay" parameterType="emp_payDTO">
        INSERT INTO ask.emp_pay(compCode, payCode, payName, taxFreeCode, taxFreeName, payType, taxFreeCalc)
        values(#{compCode}, #{payCode}, #{payName}, #{taxFreeCode}, #{taxFreeName}, #{payType}, #{taxFreeCalc})
    </insert>

    <!-- 수당관리 - 수당항목 불러오기(read) -->
    <select id="readEmpPay" parameterType="emp_payDTO" resultType="emp_payDTO">
        SELECT * FROM ask.emp_pay WHERE compCode = #{compCode};
    </select>

    <!-- 수당관리 - 수당항목 수정(update) -->
    <update id="updateEmpPay" parameterType="emp_payDTO">
        UPDATE ask.emp_pay SET compCode = #{compCode}, payCode = #{payCode}, payName = #{payName}, taxFreeName = #{taxFreeName}, payType = #{payType}, taxFreeCalc = #{taxFreeCalc}
        WHERE empPayID = ${empPayID};
    </update>
    <!-- 수당관리 - 수당항목 모달 -->
    <select id="updateEmpPayModal" parameterType="emp_payDTO" resultType="emp_payDTO">
        SELECT * FROM ask.emp_pay WHERE empPayID = #{empPayID};
    </select>

    <!-- 수당관리 - 수당 계산식 update -->
    <update id="updateCalc" parameterType="emp_payDTO">
        UPDATE ask.emp_pay SET taxFreeCalc = #{taxFreeCalc} WHERE empPayID = #{empPayID};
    </update>


    <!-- 수당관리 - 수당항목 삭제(delete) -->
    <delete id="deleteEmpPay" parameterType="emp_payDTO">
        DELETE FROM ask.emp_pay WHERE empPayID = #{empPayID};
    </delete>

    <!-- 수당관리 - 비과세 목록 가져오기(read) -->
    <select id="readTaxFree" parameterType="taxFreeDTO" resultType="taxFreeDTO">
        SELECT * FROM ask.emp_taxfree;
    </select>

    <!-- 수당관리 - payCode 중복값 확인 -->
    <select id="getPayCode" parameterType="emp_payDTO" resultType="int">
        SELECT count(*) FROM (SELECT payCode FROM ask.emp_pay WHERE empPayID NOT IN(#{empPayID})) t WHERE payCode = #{payCode};
    </select>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 세금관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- CRUD (create, read, update, delete) -->
    <!-- 세금관리 - 수당항목 등록(create) -->
    <insert id="createTax" parameterType="taxDTO">
        INSERT INTO ask.tax_info(compCode, taxCode, taxName, taxItem, taxCalc, taxNote)
        VALUES(#{compCode}, #{taxCode},#{taxName}, #{taxItem}, #{taxCalc}, #{taxNote});
    </insert>

    <!-- 세금관리 - 세금등록 세금코드 중복처리 -->
    <select id="checkCreateTax" parameterType="taxDTO" resultType="int">
        SELECT count(*) FROM ask.tax_info WHERE taxCode = #{taxCode};
    </select>


    <!-- 세금관리 - 세금정보 불러오기(read) -->
    <select id="readTax" parameterType="taxDTO" resultType="taxDTO">
        SELECT * FROM ask.tax_info WHERE compCode = #{compCode};
    </select>

    <!-- 세금관리 - 세금 카테고리 불러오기(read) -->
    <select id="readTaxCategory" parameterType="taxCategoryDTO" resultType="taxCategoryDTO">
        SELECT * FROM ask.tax_category;
    </select>

    <!-- 세금관리 - 선택한 세금항목 값 주기(read) -->
    <select id="getTaxCategory" parameterType="taxCategoryDTO" resultType="taxCategoryDTO">
        SELECT * FROM ask.tax_category WHERE taxListId = #{taxListId};
    </select>

    <!-- 세금관리 - 세금정보 수정 taxCode 중복값 확인 -->
    <select id="getTaxCode" parameterType="taxDTO" resultType="int">
        SELECT count(*) FROM (SELECT taxCode FROM ask.tax_info WHERE taxInfoID NOT IN(#{taxInfoID})) t WHERE taxCode = #{taxCode};
    </select>

     <!-- 세금관리 - 세금정보 수정(update) -->
    <update id="updateTax" parameterType="taxDTO">
        UPDATE ask.tax_info SET compCode=#{compCode}, taxCode=#{taxCode}, taxName=#{taxName}, taxItem=#{taxItem}, taxNote=#{taxNote}
        WHERE taxInfoID = #{taxInfoID};
    </update>
    <!-- 세금관리 - 세금정보 수정모달 -->
    <select id="updateTaxModal" parameterType="taxDTO" resultType="taxDTO">
        SELECT * FROM ask.tax_info WHERE taxInfoID = #{taxInfoID};
    </select>

    <!-- 세금관리 - 세금정보 삭제(delete) -->
    <delete id="deleteTax" parameterType="taxDTO">
        DELETE FROM ask.tax_info WHERE taxInfoID = #{taxInfoID};
    </delete>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ근태관리 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!--휴가항목 (CREATE) -->
    <insert id="createVactCategory" parameterType="vactCategoryDTO">
        insert into ask.vact_category(compCode, vactCode, vactName, vactDetail)
        VALUES (#{compCode}, #{vactCode}, #{vactName}, #{vactDetail});
    </insert>
    <!--휴가항목등록 예외처리-->
    <select id="checkVactCategory" parameterType="vactCategoryDTO" resultType="int">
        select count(vactCode) from ask.vact_category where vactCode = #{vactCode};
    </select>
    <!--휴가항목 (read)-->
    <select id="readVactCategory" parameterType="vactCategoryDTO" resultType="vactCategoryDTO">
        select * from ask.vact_category where compCode = #{compCode};
    </select>
    <!--휴가항목 모달창-->
    <select id="modalVactCetegory" parameterType="vactCategoryDTO" resultType="vactCategoryDTO">
        select * from ask.vact_category where vactNameListId = #{vactNameListId};
    </select>
    <!--휴가항목 (update)-->
    <update id="updateVactCategory" parameterType="vactCategoryDTO">
        update ask.vact_category SET vactCode = #{vactCode}, vactName = #{vactName}, vactDetail = #{vactDetail}
        where compCode = #{compCode} AND vactNameListId = #{vactNameListId};
    </update>
    <!--휴가항목 (delete)-->
    <delete id="deleteVactCategory" parameterType="vactCategoryDTO">
        DELETE FROM ask.vact_category where vactNameListId = #{vactNameListId};
    </delete>
    <!--휴가처리 (create) -->
    <insert id="createVactDispose" parameterType="vact_disposeDTO">
        insert into ask.vact_dispose(compCode, vactStartDate, vactEndDate, empName, depName, vactPeriod, vactName, vactDetail, vactNote)
        values (#{compCode}, #{vactStartDate}, #{vactEndDate}, #{empName}, #{depName}, DATEDIFF(#{vactEndDate}, #{vactStartDate}), #{vactName}, #{vactDetail}, #{vactNote});
    </insert>
    <!--휴가처리 ( 잔여휴가 예외처리 )-->
    <select id="VactDispose" parameterType="vact_disposeDTO" resultType="int">
        select remindVacation from ask.emp_info where compCode = #{compCode} and empName = #{empName} and depName = #{depName};
    </select>
    <!--휴가처리 (read)-->
    <select id="readVactDispose" parameterType="vact_disposeDTO" resultType="vact_disposeDTO">
        select * from ask.vact_dispose where compCode = #{compCode};
    </select>
    <!--휴가처리 승인-->
    <select id="Approval_VactDispose" parameterType="vact_disposeDTO" resultType="vact_disposeDTO">
        select * from ask.vact_dispose where compCode = #{compCode} and vactState='승인';
    </select>
    <!--휴가처리 요청-->
    <select id="request_VactDispose" parameterType="vact_disposeDTO" resultType="vact_disposeDTO">
        select * from ask.vact_dispose where compCode = #{compCode} and vactState='요청';
    </select>
    <!--휴가처리 미승인-->
    <select id="process_VactDispose" parameterType="vact_disposeDTO" resultType="vact_disposeDTO">
        select * from ask.vact_dispose where compCode = #{compCode} and vactState='미승인';
    </select>

    <!--휴가처리 상세 모달창-->
    <select id="modaldetailVactlist" parameterType="vact_disposeDTO" resultType="vact_disposeDTO">
        select * from ask.vact_dispose where disposeVactListId = #{disposeVactListId};
    </select>
    <!--휴가처리 - 휴가항목 모달창-->
    <select id="modalVactCategory" parameterType="vactCategoryDTO" resultType="vactCategoryDTO">
        select * from ask.vact_category where compCode = #{compCode} and vactNameListId = #{vactNameListId};
    </select>
    <!--휴가처리 (update) 권한 승인-->
    <update id="updateVactDispose" parameterType="vact_disposeDTO">
        update ask.vact_dispose set vactState = #{vactState}, vactNote=#{vactNote} where disposeVactListId = #{disposeVactListId};
    </update>
    <!--보유휴가 현황 ( 잔여휴가 업데이트 )-->
    <update id="updateRemindVact" parameterType="vact_disposeDTO">
        update ask.emp_info set takeVacation =(select takeVacation from (select takeVacation from ask.emp_info where empName=#{empName} and empNum =#{empNum})a) +
                                              (select vactPeriod from ask.vact_dispose where vactState='승인' and disposeVactListId=#{disposeVactListId}),
                                remindVacation = totalVacation-ifnull(takeVacation, 0) where empName = #{empName} and empNum = #{empNum} and compCode = #{compCode};
    </update>

    <!--보유휴가현황 (read)-->
    <select id="readVactlist" parameterType="empDTO" resultType="empDTO">
        select depName, empName,empNum, totalVacation, takeVacation, remindVacation,empId,compCode, depCode from ask.emp_info where compCode = #{compCode};
    </select>
    <!--보유휴가현황 모달창-->
    <select id="modalVactlist" parameterType="vact_disposeDTO" resultType="vact_disposeDTO">
        select * from ask.vact_dispose where vactState = '승인' and compCode =#{compCode} and empNum=#{empNum};
    </select>

    <!--보유휴가현황 (update) -->
    <update id="updateVactlist" parameterType="empDTO">
        update ask.emp_info SET totalVacation = #{totalVacation}
        where empId = #{empId};
    </update>
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 모바일 출근 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!--출퇴근관리 (출근 요청)-->
    <insert id="createinOut_info" parameterType="inOut_infoDTO">
        insert into ask.inOut_info(compCode, inOutDate, empCode, empName,empRank, depCode, depName, inOutStart, inOutEnd, inOutOver)
        values (#{compCode}, DATE_FORMAT(now(),'%Y-%m-%d'), #{empCode}, #{empName},#{empRank},#{depCode}, #{depName}, DATE_FORMAT(now(),' %H:%i'), #{inOutEnd}, #{inOutOver});
    </insert>
    <!-- 출퇴근관리 (퇴근요청)-->
    <update id="createEnd_inOutInfo" parameterType="inOut_infoDTO">
        update ask.inOut_info set inOutEnd = DATE_FORMAT(now(),' %H:%i ') where inOutListId = #{inOutListId};
    </update>
    <!-- 출퇴근관리 모바일 read -->
    <select id="readMb_inOutInfo" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select * from ask.inOut_info where inOutListId = #{inOutListId} and inOutDate = date_format(now(),'%Y-%m-%d');
    </select>
    <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 출퇴근 관리(임원직) ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!--출퇴근관리 create-->
    <insert id="createAdd_inOutInfo" parameterType="inOut_infoDTO">
        insert into ask.inOut_info(compCode, inOutDate, empCode, empRank, empName, depName, depCode, inOutStart, inOutEnd, inOutOver, inOut_Note) VALUES
            (#{compCode},#{inOutDate},#{empCode},#{empRank},#{empName},#{depName},#{depCode},#{inOutStart},#{inOutEnd},#{inOutOver},#{inOut_Note})
    </insert>
    <!--출퇴근관리 (read)-->
    <select id="readinout_info" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select compCode, inOutListId, inOutDate, empCode, empName, empRank, depCode, depName, DATE_FORMAT(inOutStart,'%H:%i') as inOutStart, DATE_FORMAT(inOutEnd,'%H:%i') as inOutEnd, DATE_FORMAT(inOutOver,'%H 시간') as inOutOver, inOut_Note from ask.inOut_info where compCode = #{compCode};
    </select>
    <!--출퇴근관리 초과근무시간 업데이트-->
    <update id="OvertimeUpdate" parameterType="inOut_infoDTO">
        update ask.inOut_info set inOutOver = subtime(date_sub(subtime(inOutEnd, inOutStart), interval (select lunchTime from ask.company_info where compCode=#{compCode}) hour), '08:00:00')
        where date_sub(subtime(inOutEnd, inOutStart), interval (select lunchTime from ask.company_info where compCode=#{compCode}) hour) > '08:00:00' and compCode=#{compCode};
    </update>
    <!--출퇴근관리 (모달창)-->
    <select id="modal_inOutInfo" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select compCode, inOutListId, inOutDate, empCode, empName, empRank, depCode, depName, DATE_FORMAT(inOutStart,'%H:%i') as inOutStart, DATE_FORMAT(inOutEnd,'%H:%i') as inOutEnd, inOutOver, inOut_Note from ask.inOut_info where inOutListId = #{inOutListId};
    </select>
    <!--출퇴근 관리 (update)-->
    <update id="updateinOut_info" parameterType="inOut_infoDTO">
        update ask.inOut_info set   inOutStart = #{inOutStart}, inOutEnd = #{inOutEnd}, inOutOver = #{inOutOver} , inOut_Note = #{inOut_Note}
        where  inOutListId = #{inOutListId};
    </update>
    <!--출퇴근관리 (delete)-->
    <!--pk를 주고 삭제하게 다시 생각할것-->
    <delete id="deleteinOut_info" parameterType="inOut_infoDTO">
        delete from ask.inOut_info where inOutListId = #{inOutListId};
    </delete>
    <!--출퇴근 관리 (search) 이름 날짜검색 -->
    <select id="searchInout" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where empName = #{empName} and compCode = #{compCode} and inOutDate between date (#{startDate}) and (#{endDate}+1) order by inOutDate desc;
    </select>
    <!--출퇴근 관리 (search) 이름만검색 -->
    <select id="searchInoutName" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where empName = #{empName} and compCode = #{compCode} order by inOutDate desc;
    </select>
    <!--출퇴근 관리 (search) 날자만 검색 -->
    <select id="searchInoutDate" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where compCode = #{compCode} and inOutDate between date (#{startDate}) and (#{endDate}+1) order by inOutDate desc;
    </select>
    <!--출퇴근 관리 시작날짜 + 이름 입력-->
    <select id="searchInoutstartDate" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where empName = #{empName} and compCode = #{compCode} and inOutDate between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by inOutDate ;
    </select>
    <!--출퇴근 관리 시작날짜  입력-->
    <select id="searchInoutlastDate" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where  compCode = #{compCode} and inOutDate between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by inOutDate ;
    </select>
    <!--출퇴근 관리 종료날짜만 입력-->
    <select id="searchInoutendDate" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where compCode = #{compCode} and inOutDate between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by inOutDate desc;
    </select>
    <!--출퇴근 관리 종료날짜 + 이름  입력-->
    <select id="searchInoutEndNameDate" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        select inOutDate, depName, empName, empRank,DATE_FORMAT(inOutStart,'%H:%i')as inOutStart,DATE_FORMAT(inOutEnd,'%H:%i')as inOutEnd,DATE_FORMAT(inOutOver,'%H:%i')as inOutOver from ask.inOut_info
        where empName= #{empName} and compCode = #{compCode} and inOutDate between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by inOutDate desc;
    </select>
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 일용직관리[일용직등록] > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 일용직관리[일용직등록] - 일용직정보 등록 중복처리 -->
    <select id="getDailyCode" parameterType="dailyEmpDTO" resultType="int">
        SELECT COUNT(*) FROM ask.daily_EMP WHERE compCode = #{compCode} AND dailyCode = #{dailyCode};
    </select>

    <!-- 일용직관리[일용직등록] - 일용직정보 등록(create) -->
    <insert id="createDailyEmp" parameterType="dailyEmpDTO">
        INSERT INTO ask.daily_EMP(compCode, dailyId, dailyName, dailyCode, dailySsn, dailyPhone, dailyEmail, dailyAddress, dailyRank, dailyStart, dailyBankName, dailyBankNum, dailyBankOwner, dailyEnd, dailyEndDetail, dailyPay)
        VALUES(#{compCode}, #{dailyId}, #{dailyName}, #{dailyCode}, #{dailySsn}, #{dailyPhone}, #{dailyEmail}, #{dailyAddress}, #{dailyRank}, #{dailyStart}, #{dailyBankName}, #{dailyBankNum}, #{dailyBankOwner}, #{dailyEnd}, #{dailyEndDetail},#{dailyPay});
    </insert>

    <!-- 일용직관리[일용직등록] - 일용직정보 불러오기(read) -->
    <select id="readDailyEmp" parameterType="dailyEmpDTO" resultType="dailyEmpDTO">
        SELECT * FROM ask.daily_EMP WHERE compCode = #{compCode};
    </select>

<!--    &lt;!&ndash; 일용직관리[일용직등록] - 일용직정보 검색(search) - 혹시 필요하면 사용할 것 &ndash;&gt;-->
<!--    <select id="readDailyEmp" parameterType="dailyEmpDTO" resultType="dailyEmpDTO">-->
<!--        SELECT * FROM ask.daily_EMP WHERE compCode = #{compCode};-->
<!--    </select>-->

    <!-- 일용직관리[일용직등록] - 일용직정보 수정(update) -->
    <update id="updateDailyEmp" parameterType="dailyEmpDTO">
        UPDATE ask.daily_EMP
        SET dailyName=#{dailyName}, dailyCode=#{dailyCode}, dailySsn=#{dailySsn}, dailyPhone=#{dailyPhone}, dailyEmail=#{dailyEmail}, dailyAddress=#{dailyAddress}, dailyRank=#{dailyRank},
            dailyStart=#{dailyStart}, dailyEnd=#{dailyEnd}, dailyEndDetail=#{dailyEndDetail}, dailyBankName=#{dailyBankName}, dailyBankNum=#{dailyBankNum}, dailyBankOwner=#{dailyBankOwner}
        WHERE dailyId = #{dailyId};
    </update>

    <!-- 일용직관리[일용직등록] - 일용직정보 수정 중복처리 -->
    <select id="getUpdateDailyCode" parameterType="dailyEmpDTO" resultType="int">
        SELECT COUNT(*) FROM (SELECT dailyCode FROM ask.daily_EMP WHERE dailyId NOT IN(#{dailyId})) t WHERE dailyCode = #{dailyCode};
    </select>


    <!-- 일용직관리[일용직등록] - 일용직정보 수정 모달 -->
    <select id="updateDailyEmpModal" parameterType="dailyEmpDTO" resultType="dailyEmpDTO">
        SELECT * FROM ask.daily_EMP WHERE dailyId = #{dailyId};
    </select>

    <!-- 일용직관리[일용직등록] - 일용직정보 삭제(delete)-->
    <delete id="deleteDailyEmp" parameterType="dailyEmpDTO">
        DELETE FROM ask.daily_EMP WHERE dailyId = #{dailyId};
    </delete>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 일용직관리[일용직수당] > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 일용직관리[일용직 수당 등록] - 일용직수당 중복 처리 -->
    <select id="getDPayCode" parameterType="dailyEmpPayDTO" resultType="int">
        SELECT COUNT(*) FROM ask.daily_pay WHERE compCode = #{compCode} AND dailyPayCode = #{dailyPayCode};
    </select>

    <!-- 일용직관리[일용직 수당] - 일용직수당 등록(create) -->
    <insert id="createDailyPay" parameterType="dailyEmpPayDTO">
        INSERT INTO ask.daily_pay(compCode, dailyPayCode, dailyPayName, dailyTaxFreeCode, dailyTaxFreeName, dailyTaxFreeType, dailyTaxFreeCalc)
        VALUES(#{compCode}, #{dailyPayCode}, #{dailyPayName}, #{dailyTaxFreeCode}, #{dailyTaxFreeName}, #{dailyTaxFreeType}, #{dailyTaxFreeCalc});
    </insert>

    <!-- 일용직관리[일용직수당] - 일용직수당 불러오기(read) -->
    <select id="readDailyPay" parameterType="dailyEmpPayDTO" resultType="dailyEmpPayDTO">
        SELECT * FROM ask.daily_pay WHERE compCode = #{compCode};
    </select>

    <!-- 일용직관리[일용직수당] - 일용직 비과세 정보 가져오기 -->
    <select id="readDailyTaxFree" parameterType="DailyTaxFreeDTO" resultType="DailyTaxFreeDTO">
        SELECT * FROM ask.daily_taxfree;
    </select>

    <!-- 일용직관리[일용직수당] - 일용직수당 수정(update) -->
    <update id="updateDailyPay" parameterType="dailyEmpPayDTO">
        UPDATE ask.daily_pay SET dailyPayCode=#{dailyPayCode}, dailyPayName=#{dailyPayName}, dailyTaxFreeCode=#{dailyTaxFreeCode}, dailyTaxFreeName=#{dailyTaxFreeName},
                                 dailyTaxFreeType=#{dailyTaxFreeType}, dailyTaxFreeCalc=#{dailyTaxFreeCalc}
        WHERE dailyPayId=#{dailyPayId};
    </update>

    <!-- 일용직관리[일용직수당] - 일용직수당 수정 모달 -->
    <select id="updateDailyPayModal" parameterType="dailyEmpPayDTO" resultType="dailyEmpPayDTO">
        SELECT * FROM ask.daily_pay WHERE dailyPayId = #{dailyPayId};
    </select>

    <!-- 일용직관리[일용직수당] - 일용직수당 삭제(delete)-->
    <delete id="deleteDailyPay" parameterType="dailyEmpPayDTO">
        DELETE FROM ask.daily_pay WHERE dailyPayId = #{dailyPayId};
    </delete>


    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 일용직관리[출퇴근 관리] > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 중복처리 -->
<!--    <select id="getInOutDCode" parameterType="dailyInOutDTO" resultType="int">-->
<!--        SELECT COUNT(*) FROM ask.daily_InOut WHERE compCode = #{compCode} AND dailyCode = #{dailyCode};-->
<!--    </select>-->

    <!-- 일용직관리[출퇴근관리] - 일용직 정보 가져오기(read) - 아마도 기존의 일용직 정보를 그대로 가져가도 될듯? 실험해보세요 -->
    <select id="searchDailyEmp" parameterType="dailyEmpDTO" resultType="dailyEmpDTO">
        SELECT compCode, dailyId, dailyName, dailyCode, dailySsn, dailyPhone, dailyEmail, dailyAddress, dailyRank, dailyStart, dailyBankName, dailyBankNum, dailyBankOwner, dailyEnd, dailyEndDetail, dailyPay
        FROM ask.daily_EMP
        WHERE compCode = #{compCode};
    </select>
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   -->
    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 등록(create) -->
    <insert id="createDailyInOut" parameterType="dailyInOutDTO">
        INSERT INTO ask.daily_InOut(compCode, dailyDate, dailyCode, dailyName, dailyRank, dailyInOutStart, dailyInOutEnd, dailyInOutDetail)
        VALUES(#{compCode}, #{dailyDate}, #{dailyCode}, #{dailyName}, #{dailyRank}, #{dailyInOutStart}, #{dailyInOutEnd}, #{dailyInOutDetail});
    </insert>

    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 불러오기(read) -->
    <select id="readDailyInOut" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT compCode, dailyListId, dailyDate, dailyCode, dailyName, dailyRank, DATE_FORMAT(dailyInOutStart,'%H:%i') as dailyInOutStart, DATE_FORMAT(dailyInOutEnd,'%H:%i') as dailyInOutEnd, dailyInOutDetail, ifnull(DATE_FORMAT(dailyInOutOver,'%H:%i'), '00:00') as dailyInOutOver
        FROM ask.daily_InOut
        WHERE compCode = #{compCode}
        ORDER BY dailyDate desc;
    </select>


    <!-- 일용직관리[출퇴근관리] - 일용직 초과근무시간 계산하기 -->
    <update id="updateOverTime" parameterType="dailyInOutDTO">
        update ask.daily_InOut set dailyInOutOver = ifnull(SEC_TO_TIME(TIME_TO_SEC(dailyInOutEnd)-TIME_TO_SEC(dailyInOutStart)-TIME_TO_SEC('08:00:00')-TIME_TO_SEC((select lunchTime from ask.company_info where id = #{compCode}))-TIME_TO_SEC(ifnull(dailyInOutNight,'00:00:00'))),'00:00:00')
        where compCode=#{compCode} and TIME_TO_SEC(dailyInOutEnd)-TIME_TO_SEC(dailyInOutStart) > TIME_TO_SEC('08:00:00');
    </update>


    <!-- 일용직관리[출퇴근관리] - 일용직 연장, 야간근무수당 계산하기 -->
    <update id="updateNightTime" parameterType="dailyInOutDTO">
        update ask.daily_InOut set dailyInOutNight = ifnull(SEC_TO_TIME(TIME_TO_SEC(dailyInOutEnd)-TIME_TO_SEC('22:00:00')),'00:00:00')
        where compCode=#{compCode} and TIME_TO_SEC(dailyInOutEnd) > TIME_TO_SEC('22:00:00');
    </update>

    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 수정 중복처리 -->
    <select id="getInOutDCode" parameterType="dailyInOutDTO" resultType="int">
        SELECT COUNT(*) FROM (SELECT dailyCode FROM ask.daily_InOut WHERE dailyListId NOT IN(#{dailyListId})) t WHERE dailyCode = #{dailyCode};
    </select>


    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 수정(update) -->
    <update id="updateDailyInOut" parameterType="dailyInOutDTO">
        UPDATE ask.daily_InOut SET dailyInOutStart=#{dailyInOutStart}, dailyInOutEnd=#{dailyInOutEnd}, dailyInOutDetail=#{dailyInOutDetail},
                                   dailyInOutNight=#{dailyInOutNight}, dailyPayType=#{dailyPayType}, dailyPayTypeNight=#{dailyPayTypeNight}
        WHERE dailyListId=#{dailyListId};
    </update>

    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 모달(modal) -->
    <select id="updateDailyInOutModal" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT compCode, dailyListId, dailyDate, dailyCode, dailyName, dailyRank,  DATE_FORMAT(dailyInOutStart,'%H:%i') as dailyInOutStart, DATE_FORMAT(dailyInOutEnd,'%H:%i') as dailyInOutEnd, dailyInOutDetail, ifnull(DATE_FORMAT(dailyInOutOver,'%H:%i'),'00:00')as dailyInOutOver, DATE_FORMAT(dailyInOutNight,'%H:%i') as dailyInOutNight, dailyPayType, dailyPayTypeNight FROM ask.daily_InOut WHERE dailyListId = #{dailyListId};
    </select>

    <!-- 일용직관리[출퇴근관리] - 일용직 출퇴근정보 삭제(delete) -->
    <delete id="deleteDailyInOut" parameterType="dailyInOutDTO">
        DELETE FROM ask.daily_InOut WHERE dailyListId = #{dailyListId};
    </delete>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 일용직 모바일 출근 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
<!--    &lt;!&ndash; 일용직 모바일 출퇴근관리 (출근 요청)&ndash;&gt;-->
<!--    <insert id="createinOut_info" parameterType="inOut_infoDTO">-->
<!--        insert into ask.daily_InOut(compCode, dailyListId, dailyDate, dailyCode, dailyName, depCode, depName, dailyRank, dailyInOutStart, dailyInOutEnd, dailyInOutDetail, dailyInOutOver)-->
<!--        values (#{compCode}, DATE_FORMAT(now(),'%Y-%m-%d'), #{empCode}, #{empName},#{empRank},#{depCode}, #{depName}, DATE_FORMAT(now(),' %H:%i'), #{inOutEnd}, #{inOutOver});-->
<!--    </insert>-->
<!--    &lt;!&ndash; 일용직 모바일 출퇴근관리 (퇴근 요청)&ndash;&gt;-->
<!--    <update id="createEnd_inOutInfo" parameterType="inOut_infoDTO">-->
<!--        update ask.daily_InOut set inOutEnd = DATE_FORMAT(now(),' %H:%i ') where inOutListId = #{inOutListId};-->
<!--    </update>-->
<!--    &lt;!&ndash; 일용직 모바일 출퇴근관리 read &ndash;&gt;-->
<!--    <select id="readMb_inOutInfo" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">-->
<!--        select * from ask.daily_InOut where inOutListId = #{inOutListId} and inOutDate = date_format(now(),'%Y-%m-%d');-->
<!--    </select>-->


    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 일용직관리[출퇴근현황] > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 날짜만 선택한 경우 -->
    <select id="searchDailyInOut1" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT * FROM ask.daily_InOut WHERE compCode=#{compCode} AND dailyDate BETWEEN date (#{dailyStartDate}) AND (#{dailyEndDate});
    </select>

    <!-- 날짜랑 이름 둘 다 선택한 경우 -->
    <select id="searchDailyInOut2" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT * FROM ask.daily_InOut WHERE compCode=#{compCode} AND dailyName = #{dailyName} AND dailyDate BETWEEN date (#{dailyStartDate}) AND (#{dailyEndDate});
    </select>

    <!-- 이름만 선택한 경우 -->
    <select id="searchDailyInOut3" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT * FROM ask.daily_InOut WHERE  compCode=#{compCode} AND dailyName = #{dailyName};
    </select>

    <!-- startDate 값만 입력한 경우 -->
    <select id="searchDailyInOut4" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT compCode, dailyRank, dailyDate, dailyName, DATE_FORMAT(dailyInOutStart, '%H:%i') as dailyInOutStart, DATE_FORMAT(dailyInOutEnd, '%H:%i') as dailyInOutEnd, DATE_FORMAT(dailyInOutOver,'%H:%i') as dailyInOutOver
        FROM ask.daily_InOut
        WHERE compCode = #{compCode} AND dailyDate BETWEEN date (#{dailyStartDate}) AND (select max(dailyDate) FROM ask.daily_InOut) ORDER BY dailyDate;
    </select>

    <!-- startDate 값과 이름만 입력한 경우 -->
    <select id="searchDailyInOut5" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT compCode, dailyRank, dailyDate, dailyName, DATE_FORMAT(dailyInOutStart, '%H:%i') as dailyInOutStart, DATE_FORMAT(dailyInOutEnd, '%H:%i') as dailyInOutEnd, DATE_FORMAT(dailyInOutOver,'%H:%i') as dailyInOutOver
        FROM ask.daily_InOut
        WHERE compCode=#{compCode} AND dailyName = #{dailyName} AND dailyDate BETWEEN date (#{dailyStartDate}) AND (select max(dailyDate) FROM ask.daily_InOut) ORDER BY dailyDate;
    </select>

    <!-- endDate 값만 입력한 경우 -->
    <select id="searchDailyInOut6" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT compCode, dailyRank, dailyDate, dailyName, DATE_FORMAT(dailyInOutStart, '%H:%i') as dailyInOutStart, DATE_FORMAT(dailyInOutEnd, '%H:%i') as dailyInOutEnd, DATE_FORMAT(dailyInOutOver,'%H:%i') as dailyInOutOver
        FROM ask.daily_InOut
        WHERE compCode=#{compCode} AND dailyDate BETWEEN ((select min(dailyDate) FROM ask.daily_InOut)) AND date (#{dailyEndDate}) ORDER BY dailyDate DESC;
    </select>


    <!-- endDate 값과 이름을 입력한 경우 -->
    <select id="searchDailyInOut7" parameterType="dailyInOutDTO" resultType="dailyInOutDTO">
        SELECT compCode, dailyDate, dailyName, DATE_FORMAT(dailyInOutStart, '%H:%i') as dailyInOutStart, DATE_FORMAT(dailyInOutEnd, '%H:%i') as dailyInOutEnd, DATE_FORMAT(dailyInOutOver,'%H:%i') as dailyInOutOver
        FROM ask.daily_InOut
        WHERE compCode=#{compCode} AND dailyName = #{dailyName} AND dailyDate BETWEEN ((select min(dailyDate) FROM ask.daily_InOut)) AND date (#{dailyEndDate}) ORDER BY dailyDate;
    </select>


    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 급여관리 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!--기본급여-->
    <select id="getbaseWage" parameterType="empDTO" resultType="int">
        select round(empPay/12,-1) as empPay from ask.emp_info where empName=#{empName} and empNum = #{empNum} AND compCode=#{compCode} AND depName=#{depName};
    </select>
    <!--부양가족수 가져오기-->
    <select id="getfamilyNum" parameterType="empDTO" resultType="Integer">
        select empFamilyNum from ask.emp_info where  empName=#{empName} and empNum = #{empNum} AND compCode=#{compCode} AND depName=#{depName};
    </select>
    <!--소득세-->
    <select id="getincomeTax" parameterType="empDTO" resultType="SimpleTaxTableDTO">
        select * from ask.taxPay where Salary between (select round(empPay/12/1000,-1) as empPay from ask.emp_info where empName=#{empName} and empNum = #{empNum})
                                           and (select round(empPay/12/1000,-1) as empPay from ask.emp_info
                                                where  empName=#{empName} and empNum = #{empNum} AND compCode=#{compCode} AND depName=#{depName})+10;
    </select>
    <!--    야간근로시간 변동(시간)-->
    <select id="getinOutnight" parameterType="empDTO" resultType="String">
        select  sum(TIME_TO_SEC(inOutnight))  as inOutnight from ask.inOut_info where empName=#{empName} and compCode=#{compCode} and empCode = #{empNum}
                                                                                  and inOutDate  between date (#{startDate}) and (#{endDate}+1) and payTypeNight ='변동(시간)';
    </select>
    <!--    야간근로시간 변동(일)-->
    <select id="getinOutnightday" parameterType="empDTO" resultType="String">
        select  sum(TIME_TO_SEC(inOutnight))  as inOutnight from ask.inOut_info where empName=#{empName} and compCode=#{compCode} and empCode = #{empNum}
                                                                                  and inOutDate  between date (#{startDate}) and (#{endDate}+1) and payTypeNight ='변동(일)';
    </select>

    <!--연장근로시간 변동(시간)-->
    <select id="getinOutOver" parameterType="empDTO" resultType="String">
        select sum(TIME_TO_SEC(inOutOver)) as inOutOver from ask.inOut_info where empName=#{empName} and compCode=#{compCode} and empCode = #{empNum}
                                                                              and inOutDate  between date (#{startDate}) and (#{endDate}+1) and payType ='변동(시간)';
    </select>
    <!--연장근로시간 변동(일)-->
    <select id="getinOutOverDayTax" parameterType="empDTO" resultType="String">
        select  sum(TIME_TO_SEC(inOutOver)) as inOutOver from ask.inOut_info where empName=#{empName} and compCode=#{compCode}  and empCode = #{empNum}
                                                                               and inOutDate  between date (#{startDate}) and (#{endDate}+1) and payType ='변동(일)';
    </select>



    <!-- 급여관리 - 현재 날짜 기준 한달 치 초과근무시간 가져오기 -->
    <select id="readOverInOutInfo" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        SELECT inOutOver FROM ask.inOut_info WHERE year(inOutDate) = year(current_date)
                                               AND month(inOutDate) = month(current_date)
                                               AND  empName=#{empName} and empCode = #{empCode} AND compCode=#{compCode} AND depName=#{depName};
    </select>

    <!-- 급여관리 - 야간 근무 시간 가져오기 -->
    <select id="readNightTime" parameterType="InOut_infoDTO" resultType="InOut_infoDTO">
        SELECT ADDTIME(SUBTIME(inOutEnd, inOutStart), '24:00:00') AS nightTime FROM ask.inOut_info
        WHERE empCode=#{empCode} AND <![CDATA[ inOutEnd < inOutStart ]]>;
    </select>


    <!-- [ 야간근로수당 계산식 가져오기 ] -->
    <select id="getNightCalc" parameterType="emp_payDTO" resultType="String">
        SELECT taxFreeCalc FROM ask.emp_pay WHERE compCode = #{compCode}
    </select>


    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 급여관리[임원직]> ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 급여관리[임원직] - 급여 명세서 중복처리(param : payTitle, empNum) -->
    <select id="duplicateCheck" parameterType="Salary_statementDTO" resultType="int">
        SELECT COUNT(*) FROM ask.salary_statement WHERE payTitle=#{payTitle} AND empNum=#{empNum};
    </select>

    <!--  급여관리[임원직] - 급여 명세서 추가(create) -->
    <insert id="createSalary" parameterType="Salary_statementDTO">
        INSERT INTO ask.salary_statement(compCode, payTitle, startDate, endDate, payDay, empNum, empName, depName, empPay, weeklyPay,
                                         nightTimePay, overtimePay, weekendPay, annualAllowance, dpndnAlwnc, incomeTax, localTaxes, ntnlPnsn, hlthInsrn, empIns,
                                         lngTrmCrIns, chldbChalw, foodPay, carStatePay, expense, totalPay, ddctn, actlPymnt, totalAddPay, totalAddTax, sumTotalAdd)
        values(#{compCode}, #{payTitle}, #{startDate}, #{endDate}, #{payDay}, #{empNum}, #{empName}, #{depName}, #{empPay}, #{weeklyPay},
               #{nightTimePay}, #{overtimePay}, #{weekendPay}, #{annualAllowance}, #{dpndnAlwnc}, #{incomeTax}, #{localTaxes}, #{ntnlPnsn}, #{hlthInsrn}, #{empIns},
               #{lngTrmCrIns}, #{chldbChalw}, #{foodPay}, #{carStatePay}, #{expense}, #{totalPay}, #{ddctn}, #{actlPymnt}, #{totalAddPay}, #{totalAddTax}, #{sumTotalAdd});
    </insert>


    <!-- 급여관리[임원직] - 원하는 사원 정보 가져오기(read) -->
    <select id="getEmpInfo" parameterType="empDTO" resultType="empDTO">
        SELECT * FROM ask.emp_info WHERE compCode=#{compCode} AND empNum=#{empNum};
    </select>


    <!-- [ 급여관리 - [메인]급여 명세서 불러오기(임원직)(Read) ] -->
    <!-- 사원코드, 성명, 직위/직급, 기본급, 추가수당, 세금, 합계 -->
    <select id="readMainSalary" parameterType="Salary_statementDTO" resultType="Salary_statementDTO">
        SELECT * FROM ask.salary_statement WHERE compCode = #{compCode};
    </select>

<!--    &lt;!&ndash; 날짜로 검색할 시,  급여관리 - [메인]급여 명세서 불러오기(임원직)(Read) &ndash;&gt;-->
<!--    <select id="readMainSalary2" parameterType="Salary_statementDTO" resultType="Salary_statementDTO">-->
<!--        SELECT * FROM ask.salary_statement WHERE compCode = #{compCode} AND monthYear = #{monthYear};-->
<!--    </select>-->


    <!-- [ 급여관리 - [모달]급여 명세서 불러오기(임원직)(Read) ] -->
    <!-- param : payStatementId -->
    <select id="readModalSalary" parameterType="Salary_statementDTO" resultType="Salary_statementDTO">
        SELECT * FROM ask.salary_statement WHERE payStatementId = #{payStatementId};
    </select>

    <!-- [ 급여관리 - 급여 명세서 수정 중복확인 ] -->
    <!-- param : payTitle, empNum -->
    <select id="duplicateCheckUpdate" parameterType="Salary_statementDTO" resultType="Salary_statementDTO">
        SELECT COUNT(*) FROM (SELECT payTitle, empNum FROM ask.salary_statement WHERE payStatementId NOT IN(#{payStatementId})) t WHERE payTitle = #{payTitle} AND empNum = #{empNum};
    </select>

    <!-- [ 급여관리 - 급여 명세서 수정(임원직)(Update) ] -->
    <!-- param : payStatementId -->
    <update id="updateSalary" parameterType="Salary_statementDTO">
        UPDATE ask.salary_statement SET payTitle=#{payTitle}, payDay=#{payDay}, empNum=#{empNum}, empName=#{empName}, depName=#{depName},
                                        empPay=#{empPay}, weeklyPay=#{weeklyPay}, nightTimePay=#{nightTimePay}, overtimePay=#{overtimePay}, weekendPay=#{weekendPay}, annualAllowance=#{annualAllowance},
                                        dpndnAlwnc=#{dpndnAlwnc}, incomeTax=#{incomeTax}, localTaxes=#{localTaxes}, ntnlPnsn=#{ntnlPnsn}, hlthInsrn=#{hlthInsrn}, empIns=#{empIns},
                                        lngTrmCrIns=#{lngTrmCrIns}, chldbChalw=#{chldbChalw}, foodPay=#{foodPay}, carStatePay=#{carStatePay}, expense=#{expense}, totalPay=#{totalPay},
                                        ddctn=#{ddctn}, actlPymnt=#{actlPymnt}
        WHERE payStatementId=#{payStatementId};
    </update>


    <!-- [ 급여관리 - 급여 명세서 삭제(임원직)(Delete) ] -->
    <!-- param : payStatementId -->
    <delete id="deleteSalary" parameterType="Salary_statementDTO">
        DELETE FROM ask.salary_statement WHERE payStatementId=#{payStatementId};
    </delete>


    <!-- [ 급여관리 - 수당 계산식 불러오기(read) ] -->
    <select id="getCalc" parameterType="emp_payDTO" resultType="String">
        SELECT taxFreeCalc FROM ask.emp_pay WHERE payName=#{payName} AND payType=#{payType};
    </select>

    <!-- [ 급여관리 - 출력버튼[임직원] -->
    <select id="getSalaryList" parameterType="String" resultType="Salary_statementDTO">
        SELECT * FROM ask.salary_statement WHERE payStatementId = #{payStatementId};
    </select>
    

    <!-- [ 급여관리 - 경비정보 가져오기[임직원] -->
    <select id="getExpense" parameterType="empDTO" resultType="int">
        SELECT price FROM ask.expense_info WHERE empNum =#{empNum} AND empName=#{empName} AND depCode=#{depCode} AND expenseDate between #{startDate} and #{EndDate} AND approval = '승인';
    </select>


    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 급여관리[일용직]> ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
     <!--기본급-->
    <select id="getbaseWage2" parameterType="dailySalaryStatement" resultType="int">
        select round(dailyPay,-1) as empPay from ask.daily_EMP where dailyName=#{dailyName} and dailyCode = #{dailyCode} AND compCode=#{compCode};
    </select>

    <!--야간근로시간 변동(시간)(일용직)-->
    <select id="getinOutnight2" parameterType="dailySalaryStatement" resultType="String">
        select  sum(TIME_TO_SEC(dailyInOutOver))  as dailyInOutOver from ask.daily_InOut where dailyName=#{dailyName} and compCode=#{compCode} and dailyCode = #{dailyCode}
                                                                                  and dailyDate  between date (#{dailyStartDate}) and (#{dailyEndDate}+1) and dailyPayTypeNight ='변동(시간)';
    </select>

    <!--야간근로시간 변동(일)(일용직)-->
    <select id="getinOutnightday2" parameterType="dailySalaryStatement" resultType="String">
        select  sum(TIME_TO_SEC(dailyInOutOver))  as dailyInOutOver from ask.daily_InOut where dailyName=#{dailyName} and compCode=#{compCode} and dailyCode = #{dailyCode}
                                                                                  and dailyDate  between date (#{dailyStartDate}) and (#{dailyEndDate}+1) and dailyPayTypeNight ='변동(일)';
    </select>

    <!--연장근로시간 변동(시간)(일용직)-->
    <select id="getinOutOver2" parameterType="dailySalaryStatement" resultType="String">
        select sum(TIME_TO_SEC(dailyInOutOver)) as dailyInOutOver from ask.daily_InOut where dailyName=#{dailyName} and compCode=#{compCode} and dailyCode = #{dailyCode}
                                                                              and dailyDate  between date (#{dailyStartDate}) and (#{dailyEndDate}+1) and dailyPayType ='변동(시간)';
    </select>

    <!--연장근로시간 변동(일)(일용직)-->
    <select id="getinOutOverDayTax2" parameterType="dailySalaryStatement" resultType="String">
        select  sum(TIME_TO_SEC(dailyInOutOver)) as dailyInOutOver from ask.daily_InOut where dailyName=#{dailyName} and compCode=#{compCode}  and dailyCode = #{dailyCode}
                                                                               and dailyDate  between date (#{dailyStartDate}) and (#{dailyEndDate}+1) and dailyPayType ='변동(일)';
    </select>

     <!--급여관리 - 현재 날짜 기준 한달 치 초과근무시간 가져오기(일용직)-->
    <select id="readOverInOutInfo2" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        SELECT inOutOver FROM ask.inOut_info WHERE year(inOutDate) = year(current_date)
                                               AND month(inOutDate) = month(current_date)
                                               AND  empName=#{empName} and empCode = #{empCode} AND compCode=#{compCode} AND depName=#{depName};
    </select>

     <!--급여관리 - 야간 근무 시간 가져오기(일용직)-->
    <select id="readNightTime2" parameterType="InOut_infoDTO" resultType="InOut_infoDTO">
        SELECT ADDTIME(SUBTIME(inOutEnd, inOutStart), '24:00:00') AS nightTime FROM ask.inOut_info
        WHERE empCode=#{empCode} AND <![CDATA[ inOutEnd < inOutStart ]]>;
    </select>


    <!-- [ 야간근로수당 계산식 가져오기(일용직) ]-->
    <select id="getNightCalc2" parameterType="emp_payDTO" resultType="String">
        SELECT taxFreeCalc FROM ask.emp_pay WHERE compCode = #{compCode}
    </select>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
    <!-- 급여관리[일용직] - 급여 명세서 중복처리(param : payTitle, empNum) -->
    <select id="duplicateCheck2" parameterType="dailySalaryStatement" resultType="int">
        SELECT COUNT(*) FROM ask.daily_salary_statement WHERE dailyPayTitle=#{dailyPayTitle} AND dailyCode=#{dailyCode};
    </select>

    <!--  급여관리[일용직] - 급여 명세서 추가(create) -->
    <insert id="createDailySalary" parameterType="dailySalaryStatement">
        INSERT INTO ask.daily_salary_statement(compCode, dailyCode, dailyPayTitle, dailyStartDate, dailyEndDate, dailyPayDay, dailyName, dailyPay, dailyWeeklyPay,
                                               dailyOvertimePay, dailyNightTimePay, dailyWeekendPay, dailyIncomeTax, dailyLocalTaxes, dailyNtnlPnsn, dailyHlthInsrn,
                                               dailyEmpIns, dailyIngTrmCrIns, dailyTotalPay, dailyDdctn, dailyActlPymnt, dailyTotalAddPay, dailyTotalAddTax, dailySumTotalAdd, dailyRank)
        values(#{compCode}, #{dailyCode}, #{dailyPayTitle}, #{dailyStartDate}, #{dailyEndDate}, #{dailyPayDay}, #{dailyName}, #{dailyPay}, #{dailyWeeklyPay},
               #{dailyOvertimePay}, #{dailyNightTimePay}, #{dailyWeekendPay}, #{dailyIncomeTax}, #{dailyLocalTaxes}, #{dailyNtnlPnsn}, #{dailyHlthInsrn},
               #{dailyEmpIns}, #{dailyIngTrmCrIns}, #{dailyTotalPay}, #{dailyDdctn}, #{dailyActlPymnt}, #{dailyTotalAddPay}, #{dailyTotalAddTax}, #{dailySumTotalAdd}, #{dailyRank});
    </insert>


    <!-- 급여관리[일용직] - 원하는 사원 정보 가져오기(read) -->
    <select id="getEmpInfo2" parameterType="empDTO" resultType="empDTO">
        SELECT * FROM ask.emp_info WHERE compCode=#{compCode} AND empNum=#{empNum};
    </select>


    <!-- [ 급여관리 - [메인]급여 명세서 불러오기(일용직)(Read) ] -->
    <!-- 사원코드, 성명, 직위/직급, 기본급, 추가수당, 세금, 합계 -->
    <select id="readDailyMainSalary" parameterType="dailySalaryStatement" resultType="dailySalaryStatement">
        SELECT * FROM ask.daily_salary_statement WHERE compCode = #{compCode};
    </select>

    <!-- [ 급여관리 - [모달]급여 명세서 불러오기(일용직)(Read) ] -->
    <!-- param : payStatementId -->
    <select id="readDailyModalSalary" parameterType="dailySalaryStatement" resultType="dailySalaryStatement">
        SELECT * FROM ask.daily_salary_statement WHERE statementId = #{statementId};
    </select>

    <!-- [ 급여관리 - 급여 명세서 수정 중복확인(일용직) ] -->
    <!-- param : payTitle, empNum -->
    <select id="duplicateCheckUpdate2" parameterType="Salary_statementDTO" resultType="Salary_statementDTO">
        SELECT COUNT(*) FROM (SELECT payTitle, empNum FROM ask.salary_statement WHERE payStatementId NOT IN(#{payStatementId})) t WHERE payTitle = #{payTitle} AND empNum = #{empNum};
    </select>

    <!-- [ 급여관리 - 급여 명세서 수정(일용직)(Update) ] -->
    <!-- param : payStatementId -->
    <update id="updateSalary2" parameterType="Salary_statementDTO">
        UPDATE ask.salary_statement SET payTitle=#{payTitle}, payDay=#{payDay}, empNum=#{empNum}, empName=#{empName}, depName=#{depName},
                                        empPay=#{empPay}, weeklyPay=#{weeklyPay}, nightTimePay=#{nightTimePay}, overtimePay=#{overtimePay}, weekendPay=#{weekendPay}, annualAllowance=#{annualAllowance},
                                        dpndnAlwnc=#{dpndnAlwnc}, incomeTax=#{incomeTax}, localTaxes=#{localTaxes}, ntnlPnsn=#{ntnlPnsn}, hlthInsrn=#{hlthInsrn}, empIns=#{empIns},
                                        lngTrmCrIns=#{lngTrmCrIns}, chldbChalw=#{chldbChalw}, foodPay=#{foodPay}, carStatePay=#{carStatePay}, expense=#{expense}, totalPay=#{totalPay},
                                        ddctn=#{ddctn}, actlPymnt=#{actlPymnt}
        WHERE payStatementId=#{payStatementId};
    </update>


    <!-- [ 급여관리 - 급여 명세서 삭제(일용직)(Delete) ] -->
    <!-- param : payStatementId -->
    <delete id="deleteDailySalary" parameterType="dailySalaryStatement">
        DELETE FROM ask.daily_salary_statement WHERE statementId=#{statementId};
    </delete>


    <!-- [ 급여관리 - 수당 계산식 불러오기(read)(일용직) ] -->
    <select id="getCalc2" parameterType="emp_payDTO" resultType="String">
        SELECT taxFreeCalc FROM ask.emp_pay WHERE payName=#{payName} AND payType=#{payType};
    </select>

    <!-- [ 급여관리 - 출력버튼[일용직] -->
    <select id="getSalaryList2" parameterType="String" resultType="dailySalaryStatement">
        SELECT * FROM ask.daily_salary_statement WHERE statementId = #{statementId};
    </select>

    <!-- [ 급여관리 - 경비정보 가져오기[임원직] -->
    <select id="getExpense2" parameterType="dailySalaryStatement" resultType="int">
        SELECT price FROM ask.expense_info WHERE empNum =#{empNum} AND empName=#{empName} AND depCode=#{depCode} AND expenseDate between #{startDate} and #{EndDate} AND approval = '승인';
    </select>
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 경비관리 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!--경비처리 create-->
    <insert id="expenseCreate" parameterType="Expense_infoDTO">
        insert into ask.expense_info (compCode, empNum, empName, depCode, depName, shopName, shopNum, expenseDate, expenseName, history, price, documentation, totalPrice, approval, approvalDate)
        values (#{compCode}, #{empNum}, #{empName}, #{depCode}, #{depName}, #{shopName}, #{shopNum}, #{expenseDate}, #{expenseName}, #{history}, #{price}, #{documentation}, #{totalPrice});
    </insert>

    <!--경비관리 read-->
    <select id="expenseRead" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select expenseListId, empNum, empName, depCode, depName, shopName, shopNum, expenseDate, expenseName, history, price, documentation, compCode, approval, approvalDate from ask.expense_info where compCode = #{compCode};
    </select>

    <!--경비관리 update - 요청날짜 -->
    <update id="expenseUpdateRequest" parameterType="Expense_infoDTO">
        update ask.expense_info set approval=#{approval}, history=#{history}, requestDate=#{requestDate}
        where expenseListId=#{expenseListId};
    </update>

    <!--경비관리 update - 승인날짜 -->
    <update id="expenseUpdateApproval" parameterType="Expense_infoDTO">
        update ask.expense_info set approval=#{approval}, history=#{history}, approvalDate=#{approvalDate}
        where expenseListId = #{expenseListId};
    </update>

    <!--경비관리 delete-->
    <delete id="expenseDelete" parameterType="Expense_infoDTO">
        delete from ask.expense_info where expenseListId = #{expenseListId}
    </delete>

    <!--경비관리 모달창-->
    <select id="expenseModal" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info where expenseListId = #{expenseListId};
    </select>

    <!--경비 관리 (search) 이름 날짜검색 -->
    <select id="expenseSearch" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where empName = #{empName} and compCode = #{compCode} and expenseDate between date (#{startDate}) and (#{endDate}+1) order by expenseDate desc;
    </select>

    <!--경비 관리 (search) 이름만검색 -->
    <select id="expenseName" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where empName = #{empName} and compCode = #{compCode} order by expenseDate desc;
    </select>

    <!--경비 관리 (search) 날자만 검색 -->
    <select id="expensedate" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where compCode = #{compCode} and expenseDate between date (#{startDate}) and (#{endDate}+1) order by expenseDate desc;
    </select>

    <!--경비 관리 시작날짜 + 이름 입력-->
    <select id="expenseStartDateName" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where empName = #{empName} and compCode = #{compCode} and expenseDate between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by expenseDate ;
    </select>

    <!--경비 관리 시작날짜  입력-->
    <select id="expenseStartDate" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where  compCode = #{compCode} and expenseDate between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by expenseDate ;
    </select>

    <!--경비 관리 종료날짜만 입력-->
    <select id="expenseEndDate" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where compCode = #{compCode} and expenseDate between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by expenseDate desc;
    </select>

    <!--경비 관리 종료날짜 + 이름  입력-->
    <select id="expenseEndDateName" parameterType="Expense_infoDTO" resultType="Expense_infoDTO">
        select * from ask.expense_info
        where empName= #{empName} and compCode = #{compCode} and expenseDate between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by expenseDate desc;
    </select>

    <!-- 경비관리 - 영수증 카운트를 위한 id값 카운트 -->
    <select id="getCountReceipt" parameterType="Expense_infoDTO" resultType="int">
        SELECT COUNT(*) FROM ask.expense_info WHERE compCode = #{compCode};
    </select>

    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ경리/회계ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!--거래처관리 create-->
    <insert id="clientCreate" parameterType="Client_infoDTO">
        insert into ask.client_info(compCode,clientCompNum, clientName, clientCEO, clientstate, clientevent, clientPhone, clientEmail, clientDetail, clientAddress, clientBankName, clientBankNum, clientBankOwner)
        VALUES (#{compCode},#{clientCompNum},#{clientName},#{clientCEO},#{clientstate},#{clientevent},#{clientPhone},#{clientEmail},#{clientDetail},#{clientAddress},#{clientBankName},#{clientBankNum},#{clientBankOwner})
    </insert>
    <!--거래처관리 read-->
    <select id="clientRead" parameterType="Client_infoDTO" resultType="Client_infoDTO">
        select * from ask.client_info where compCode = #{compCode};
    </select>
    <!--거래처관리 update-->
    <update id="clientUpdate" parameterType="Client_infoDTO">
        update ask.client_info set clientName = #{clientName}, clientCEO = #{clientCEO}, clientPhone=#{clientPhone},clientEmail=#{clientEmail},
                                   clientstate=#{clientstate},clientevent=#{clientevent},clientBankName = #{clientBankName}, clientBankOwner=#{clientBankOwner},
                                   clientBankNum=#{clientBankNum}, clientAddress=#{clientAddress}
                               where clientCompNum = #{clientCompNum};
    </update>
    <!--거래처관리 delete-->
    <delete id="clientDelete" parameterType="Client_infoDTO">
        delete from ask.client_info where clientCompNum = #{clientCompNum};
    </delete>
    <!--거래처관리 모달창-->
    <select id="clientModal" parameterType="Client_infoDTO" resultType="Client_infoDTO">
        select * from ask.client_info where clientCompNum = #{clientCompNum}
    </select>
    <!--거래상세페이지-->
    <select id="clientdetail" parameterType="Client_infoDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info where compCode=#{compCode} and p_division = '매출' and p_clientCompNum=#{clientCompNum} and p_date between date (#{startDate}) and (#{endDate}) order by p_date desc;
    </select>


    <!--매입관리 create-->
    <insert id="income_Create" parameterType="income_outcomeDTO">
        insert into ask.purchase_info(purchaseId, p_division, p_date, p_taxType, p_item, p_iCount, p_unitPrice, p_supplyValue, p_surTax, p_totalPrice, p_clientCompNum, p_clientName, compCode,totalsupplyValue,totalsurTax,total) VALUES
            (#{purchaseId},#{p_division},#{p_date},#{p_taxType},#{p_item},#{p_iCount},#{p_unitPrice},#{p_supplyValue},#{p_surTax},#{p_totalPrice},#{p_clientCompNum},#{p_clientName},#{compCode},#{totalsupplyValue},#{totalsurTax},#{total})
    </insert>
    <!--매입 데이터 + 파일 경로 저장-->
    <insert id="taxfile_create" parameterType="income_outcomeDTO">
        insert into ask.purchase_info(purchaseId, p_division, p_date, p_taxType, p_item, p_iCount, p_unitPrice, p_supplyValue, p_surTax, p_totalPrice, p_clientCompNum, p_clientName, compCode,totalsupplyValue,totalsurTax,total,taxBill) VALUES
            (#{purchaseId},#{p_division},#{p_date},#{p_taxType},#{p_item},#{p_iCount},#{p_unitPrice},#{p_supplyValue},#{p_surTax},#{p_totalPrice},#{p_clientCompNum},#{p_clientName},#{compCode},#{totalsupplyValue},#{totalsurTax},#{total},#{taxBill})
    </insert>
    <!--매입관리 read-->
    <select id="income_Read" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info where compCode = #{compCode};
    </select>
    <!--매입관리 상세페이지-->
    <select id="income_Modal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info where purchaseId = #{purchaseId};
    </select>
    <!--합계금액 매입-->
    <select id="income_total" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) as total from ask.purchase_info where compCode = #{compCode} and p_division = '매입';
    </select>
    <!--합계금액 매출-->
    <select id="income_total1" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) as total from ask.purchase_info where compCode = #{compCode} and p_division = '매출';
    </select>
    <!--매입관리 update--> <!--사업자번호, 거래처명은 수정안해도될거같아서 안넣음-->
    <update id="income_Update" parameterType="income_outcomeDTO">
        update ask.purchase_info set p_division = #{p_division}, p_date = #{p_date}, p_taxType = #{p_taxType} , p_item = #{p_item}, p_iCount=#{p_iCount},p_unitPrice=#{p_unitPrice},
                                     p_supplyValue = #{p_supplyValue}, p_surTax=#{p_surTax},p_totalPrice=#{p_totalPrice}
        where purchaseId = #{purchaseId};
    </update>
    <!--매입관리 delete-->
    <delete id="income_Delete" parameterType="income_outcomeDTO">
        delete from ask.purchase_info where purchaseId = #{purchaseId};
    </delete>
    <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ매입 검색ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!--매입 관리 (search) 이름 날짜검색 -->
    <select id="income_Search" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} and p_date between date (#{startDate}) and (#{endDate}) order by p_date desc;
    </select>
    <!--매입 관리 (search) 이름 날짜검색  합계금액-->
    <select id="income_SearchTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} and p_date between date (#{startDate}) and (#{endDate}) order by p_date desc;
    </select>
    <!--매입검색-->
    <select id="income_income" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where compCode = #{compCode} and p_division = '매입';
    </select>
    <!--매입검색 합계금액-->
    <select id="income_incomeTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where compCode = #{compCode} and p_division = '매입';
    </select>
    <!--매출검색-->
    <select id="income_outcome" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where compCode = #{compCode} and p_division = '매출';
    </select>
    <!--매출검색 합계금액-->
    <select id="income_outcomeTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where compCode = #{compCode} and p_division = '매출';
    </select>
    <!--매입 관리 (search) 공급처 검색 -->
    <select id="income_Name" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} order by p_date desc;
    </select>
    <!--매입관리 공급처 합계금액-->
    <select id="income_NameTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} order by p_date desc;
    </select>
    <!--매입 관리 (search) 날자만 검색 -->
    <select id="income_Date" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where compCode = #{compCode} and p_date between date (#{startDate}) and (#{endDate}+1) order by p_date desc;
    </select>
    <!--매입 관리 (search) 날자만 검색 합계금액 -->
    <select id="income_DateTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where compCode = #{compCode} and p_date between date (#{startDate}) and (#{endDate}+1) order by p_date desc;
    </select>
    <!--매입 관리 시작날짜 + 이름 입력-->
    <select id="income_StartDateName" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} and p_date between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by p_date ;
    </select>
    <!--매입 관리 시작날짜 + 이름 입력 합계금액-->
    <select id="income_StartDateNameTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} and p_date between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by p_date ;
    </select>
    <!--매입 관리 시작날짜  입력-->
    <select id="income_StartDate" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where  compCode = #{compCode} and p_date between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by p_date ;
    </select>
    <!--매입 관리 시작날짜 합계금액-->
    <select id="income_StartDateTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where  compCode = #{compCode} and p_date between date (#{startDate}) and (select max(inOutDate) from ask.inOut_info) order by p_date ;
    </select>
    <!--매입 관리 종료날짜만 입력-->
    <select id="income_EndDate" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where compCode = #{compCode} and p_date between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by p_date desc;
    </select>
    <!--매입 관리 종료날짜만 입력 합계금액-->
    <select id="income_EndDateTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where compCode = #{compCode} and p_date between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by p_date desc;
    </select>
    <!--매입 종료날짜 + 이름  입력-->
    <select id="income_EndDateName" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select * from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} and p_date between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by p_date desc;
    </select>
    <!--매입 종료날짜 + 이름  입력 합계금액-->
    <select id="income_EndDateNameTotal" parameterType="income_outcomeDTO" resultType="income_outcomeDTO">
        select sum(p_supplyValue) as totalsupplyValue, sum(p_surTax) as totalsurTax, sum(p_totalPrice) total from ask.purchase_info
        where p_clientName like CONCAT('%',#{p_clientName},'%') and compCode = #{compCode} and p_date between date ((select min(inOutDate) from ask.inOut_info)) and (#{endDate}+1) order by p_date desc;
    </select>
    <!--매입매출 카운트-->
    <select id="getCount" parameterType="income_outcomeDTO" resultType="int">
        select count(*) from ask.purchase_info where p_division='매입' and compCode=#{compCode};
    </select>
    <!--세금계산서 거래내역 내보내기-->
    <select id="getTransaction" parameterType="int" resultType="TaxPaperDTO">
        select p_date, p_item,p_iCount, p_unitPrice, p_supplyValue, p_surTax, p_totalPrice from ask.purchase_info where p_division = '매출' and purchaseId =#{purchaseId};
    </select>
    <!--세금계산서 거래내역 내보내기-->
    <select id="getClientInfo" parameterType="int" resultType="String">
        select p_clientCompNum from ask.purchase_info where p_division = '매출' and purchaseId =#{purchaseId};
    </select>
    <!--세금계산서 거래처정보 내보내기1-->
    <select id="getClientInfo1" parameterType="String" resultType="TaxPaperDTO">
        select * from ask.client_info where clientCompNum=#{p_clientCompNum};
    </select>
    <!--우리회사정보 가져오기-->
    <select id="getCompanyinfo" parameterType="String" resultType="TaxPaperDTO">
        select compNum,compName, compCEO, compAddress, compType, compItems, compEmail from ask.company_info where id = #{compCode};
    </select>
    <!--세금계산서 합계금액 가져오기 -->
    <select id="getTotalPay" parameterType="int" resultType="TaxPaperDTO">
        select sum(p_supplyValue) as TotalsupplyValue, sum(p_surTax) as TotalsurTax, sum(p_totalPrice) as TotalPrice from ask.purchase_info
        where purchaseId = #{purchaseId} and p_division = '매출';
    </select>

    <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 매입, 매출 차트 >ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <select id="getIncomeData" parameterType="income_outcomeDTO" resultType="Integer">
        select sum(p_totalPrice) as p_totalPrice from ask.purchase_info where compCode=#{compCode} and p_division = '매입' and p_date between date (#{startDate}) and (#{endDate});
    </select>

    <select id="getOutcomeData" parameterType="income_outcomeDTO" resultType="Integer">
        select sum(p_totalPrice) as p_totalPrice from ask.purchase_info where compCode=#{compCode} and p_division = '매출' and p_date between date (#{startDate}) and (#{endDate}) ;
    </select>

    <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 모바일 로그인 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!-- 모바일 로그인 - 계정 존재 여부 확인 -->
    <select id="checkMbLogin" parameterType="mbUserDTO" resultType="int">
        select COUNT(*) FROM ask.mbUser_info WHERE mb_id = #{mb_id} AND mb_pw = #{mb_pw};
    </select>

    <!-- 모바일 로그인 - 계정 정보 불러오기 -->
    <select id="getMbData" parameterType="mbUserDTO" resultType="mbUserDTO">
        SELECT * FROM ask.mbUser_info WHERE mb_id = #{mb_id} AND mb_pw = #{mb_pw};
    </select>
    
    <!-- 모바일 로그인 - 최초 로그인(비밀번호 변경) -->
    <update id="mbFirstUpdate" parameterType="mbUserDTO">
        UPDATE ask.mbUser_info SET mb_pw = #{updatePw}
        WHERE mb_id = #{mb_id} AND mb_pw = #{mb_pw};
    </update>

    <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ < 모바일 메인페이지 > ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!-- 모바일 메인페이지 - 출퇴근 현황 표시 -->
    <select id="getInOutData" parameterType="inOut_infoDTO" resultType="inOut_infoDTO">
        SELECT * FROM ask.inOut_info WHERE compCode=#{compCode} AND empCode=#{empCode};
    </select>



</mapper>